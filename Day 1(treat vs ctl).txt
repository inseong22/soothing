library(dplyr)
library(tidyr)
install.packages("gridExtra")
library(gridExtra)

# 데이터 불러오기 및 전처리
read_and_process_data <- function(file_path, time) {
  data <- read_excel(file_path)
  colnames(data)[1] <- "...1"  # 첫 번째 열 이름 변경
  data <- data.frame(data)
  data$id <- as.numeric(sub("s(\\d+)_.*", "\\1", data$`...1`))
  data$time <- time
  data <- data[!is.na(data$game_avg), ] #
  data <- data[,c("id", "time", "game_avg", "ctl_avg")] #
  df <- melt(data, id.vars = c("id", "time"), measure.vars = c("game_avg", "ctl_avg")) #
  df <- df %>%
    rename(treatment = variable, score = value)
  df$treatment <- factor(df$treatment, levels = c("game_avg", "ctl_avg")) #
  return(df)}
# 각 날짜별 데이터 불러오기
df1 <- read_and_process_data("C:/Users/kkhyu/OneDrive/바탕 화면/meteor_56/1일차/조건별/ai_stand, 1일차 조건별.xlsx", "1day")
df1
# 데이터 스택으로 합치기
# df3에 있는 id와 일치하는 df1, df2의 행들을 선택하여 병합

###################################################################      
summary(df1) #요약통계

# Paired Wilcoxon Test 수행
wilcoxon_test_result <- compare_means(score ~ treatment, data = df1, method="wilcox.test", paired = TRUE)
wilcoxon_test_result
compare_means(score ~ treatment, data = df1,method='t.test', paired=TRUE)
  #ONE-TAILED VERSION
    wilcoxon_test_result <- compare_means(score ~ treatment, data = df1, method="wilcox.test", alternative="less", paired = TRUE)
    wilcoxon_test_result
    compare_means(score ~ treatment, data = df1,method='t.test', alternative="less", paired=TRUE)
 ###################   
    #t 통계량값
    df_treat <- subset(df1, treatment == 'game_avg')
    df_ctl <- subset(df1, treatment == 'ctl_avg')
    df_ctl
    t.test(df_ctl$score, df_treat$score, alternative="two.sided", paired=TRUE, var.equal=FALSE)
    t.test(df_ctl$score, df_treat$score, alternative="greater", paired=TRUE, var.equal=FALSE)
    t.test(df_ctl$score, df_treat$score, alternative="less", paired=TRUE, var.equal=FALSE)
    
    wilcox.test(df_ctl$score, df_treat$score, alternative="two.sided", paired=TRUE, var.equal=FALSE)
    wilcox.test(df_ctl$score, df_treat$score, alternative="greater", paired=TRUE, var.equal=FALSE)
 ##################  
    
ggplot(df1, aes(x = treatment, y = score, fill = treatment)) +
  geom_boxplot() +
  geom_jitter(width = 0.2, alpha = 0.5) +
  labs(title = "Paired Wilcoxon Test: treat vs. ctl (DAY1, n=56)", 
       x = "Treatment", 
       y = "Score") +
  theme_minimal() +
  scale_fill_manual(values = c("game_avg" = "orange", "ctl_avg" = "#F5F5F5")) +
  theme(legend.position = "none") +
  ylim(-2, 2) +
  stat_compare_means(method = "wilcox.test", paired = TRUE, label = "p.format")



analyze_rm_anova(df1) #이원산 반복측정 분산분석결과
tworm_bxp(df_avg, "Similarity score, 2w rm anova(n=56)", -2, 2, c)
int_all <- draw_interaction_plot(df_avg)
diff_all <- draw_effect_plot(df_avg)
## 한꺼번에 세집단, 두집단씩 비교              
#비모수 -> Run Kruskal-Wallis test and Wilcoxon test
kruskal_test_result <- compare_means(score ~ treatment, data = df_avg, group.by = "time", method = "kruskal.test", paired = TRUE)
wilcoxon_test_result <- compare_means(score ~ treatment, data = df_avg, group.by = "time", paired = TRUE)
kruskal_test_result
wilcoxon_test_result
#모수  
compare_means(score ~ treatment, data = df_avg, group.by = "time", 
              method='anova', paired=TRUE)
compare_means(score ~ treatment, data = df_avg, group.by = "time", 
              method='t.test', paired=TRUE)  
c <- c("orange","#F5F5F5")
c <- c("#F8766D", "#00BFC4", "#F5F5F5") 
c1 <- c("darkseagreen3", "darkseagreen2", "white") #긍정col
c2 <- c("thistle","thistle1","white")   #부정col

########아래는 함수목록##############
#0.데이터 요약 함수 
    summary <- function(df) {
      # 요약 통계량 계산
      summary_stats <- df %>%
        group_by(treatment) %>%
        summarize(
          median_score = median(score, na.rm = TRUE),mean_score = mean(score, na.rm = TRUE),
          sd_score = sd(score, na.rm = TRUE),
          min_score = min(score, na.rm = TRUE),max_score = max(score, na.rm = TRUE),
          q1_score = quantile(score, probs = 0.25, na.rm = TRUE), q3_score = quantile(score, probs = 0.75, na.rm = TRUE))
      print(summary_stats)
      # Shapiro-Wilk 정규성 검정 결과 출력
      shapiro_results <- df %>%
        group_by(treatment) %>%
        summarise(p_value = shapiro.test(score)$p.value)
      print(shapiro_results)
      # 등분산성 검정 (Levene's Test)
levene_result <- car::leveneTest(score ~ treatment, data = df)
print(levene_result)
# outlier check
outliers <- df %>%
  group_by(treatment) %>%
  rstatix::identify_outliers(score)
print(outliers)
# Q-Q Plot 그리기
qqplot <- ggqqplot(df, "score", ggtheme = theme_bw()) +
  facet_grid(~treatment, labeller = "label_both") +
  labs(title = "Q-Q Plot of Score by Treatment",
       x = "Theoretical Quantiles", y = "Sample Quantiles") +
  theme_minimal()
# 그룹별 히스토그램 그리기
histograms <- ggplot(df, aes(x = score, fill = treatment)) +
  geom_histogram(binwidth = 0.1, position = "dodge") +
  facet_grid(~treatment, scales = "free_y") +
  labs(title = "Histograms of Score by Treatment",
       x = "Score", y = "Frequency") +
  theme_minimal()
# Q-Q Plot과 히스토그램을 한 페이지에 출력
grid.arrange(qqplot, histograms, ncol = 2)}
#1. one-way repeated anova #
rm_anova <- function(df) {
  res.aov <- anova_test(data = df, dv = score, wid = id, within = treatment)
  get_anova_table(res.aov)
  # pairwise comparisons
  pwc <- df %>%
    pairwise_t_test(
      score ~ treatment, paired = TRUE,
      p.adjust.method = "bonferroni")
  return(list(one_way_RMANOVA_result = get_anova_table(res.aov), pairwise_test = pwc))}

#1-1. DRAW BOXPLOT with p-val significance
onerm_bxp <- function(df, title, low, up, c) {
  res.aov <- anova_test(data = df, dv = score, wid = id, within = treatment)
  get_anova_table(res.aov)
  # pairwise comparisons
  pwc <- df %>%
    pairwise_t_test(
      score ~ treatment, paired = TRUE,
      p.adjust.method = "bonferroni")
  # Remove non-significant p-values
  pwc <- pwc %>%
    filter(p.adj < 0.05)  # 0.05이하가 아니면 표시 안되게 함
  group_means <- df %>%
    group_by(treatment) %>%
    summarise(mean_score = mean(score)) %>%
    arrange(treatment)  # 시간과 처리 순서대로 정렬
  bxp <- ggboxplot(df, x = "treatment", y = "score", fill = "treatment", palette = c) +
    geom_line(data = group_means, aes(x = treatment, y = mean_score, group = 1), 
              color = "black", size = 0.5, inherit.aes = FALSE) +  # inherit.aes = FALSE 설정
    geom_point(data = group_means, aes(x = treatment, y = mean_score), 
               color = "black", fill = "white", shape = 21, size = 2) +
    labs(title = title, y=NULL, x=NULL) +
    theme(legend.title=element_blank(),
          plot.title = element_text(size = 9),  # 제목 크기 조정
          legend.text = element_text(size = 8),  # 범례 텍스트 크기 조정
          axis.text.x = element_text(size = 8),
          axis.text.y = element_text(size = 9))+ # x축 제목 크기 조정
    ylim(low, up)
  pwc <- pwc %>% add_xy_position(x = "treatment")
  if (nrow(pwc) > 0) {
    bxp + 
      stat_pvalue_manual(pwc) +
      labs(
        subtitle = get_test_label(res.aov, detailed = TRUE),
        caption = get_pwc_label(pwc)) +
      theme(
        plot.caption = element_text(size = 9),  # caption의 텍스트 크기 조정
        plot.subtitle = element_text(size = 9))}  # subtitle의 텍스트 크기 조정
  else {
    bxp + labs(
      subtitle = get_test_label(res.aov, detailed = TRUE),
      caption = "No significant differences found") +
      theme(
        plot.caption = element_text(size = 8.5),  # caption의 텍스트 크기 조정
        plot.subtitle = element_text(size = 8.5))}}  # subtitle의 텍스트 크기 조정

#비모수 p-val *,**,*** boxplot
KW_bxp <- function(data, title, low, up, c) {
  group_means <- data %>%
    group_by(treatment) %>%
    summarise(mean_score = mean(score)) %>%
    arrange(treatment)  # 시간과 처리 순서대로 정렬
  compare_means(score ~ treatment, data = data, method = "wilcox.test", paired = TRUE) ##바꿔줘야해해
  ggboxplot(data, x = "treatment", y = "score", fill = "treatment", palette = c) +
    labs(title = title, y=NULL, x=NULL) +
    geom_line(data = group_means, aes(x = treatment, y = mean_score, group = 1), 
              color = "black", size = 0.5, inherit.aes = FALSE, show.legend = FALSE) +  
    geom_point(data = group_means, aes(x = treatment, y = mean_score), 
               color = "black", fill = "white", shape = 21, size = 2) +
    ylim(low, up) +
    theme(plot.title = element_text(size = 11),
          legend.text = element_text(size = 8),  # 범례 텍스트 크기 조정
          axis.text.x = element_text(size = 8),
          axis.text.y = element_text(size = 9))+
    stat_compare_means(label = "p.signif", method = "wilcox.test", 
                       method.args = list(alternative = "two.sided", paired=TRUE),
                       comparisons = list(c("game_avg", "ctl_avg")), p.thresholds = c(0.001, 0.01, 0.05, 0.1), ###바꿔야해해
                       size = 3)}
#모수의 경우 boxplot
ANOVA_bxp <- function(data, title, low, up, c) {
  group_means <- data %>%
    group_by(treatment) %>%
    summarise(mean_score = mean(score)) %>%
    arrange(treatment)  # 시간과 처리 순서대로 정렬
  anova_result <- compare_means(score ~ treatment, data = data, method = "anova")
  t_test_result <- compare_means(score ~ treatment, data = data, method = "t.test", ref.group = "ctl_avg", paired = TRUE)
  p_val <- round(anova_result$p, 3)
  anova_label <- ifelse(p_val < 0.001, "***", ifelse(p_val < 0.01, "**", ifelse(p_val < 0.05, "*", "")))
  ggboxplot(data, x = "treatment", y = "score", fill = "treatment", palette = c) +
    labs(title = title, y=NULL, x = NULL) + #x축 라벨 제거
    geom_line(data = group_means, aes(x = treatment, y = mean_score, group = 1), 
              color = "black", size = 0.5, inherit.aes = FALSE, show.legend = FALSE) +  
    geom_point(data = group_means, aes(x = treatment, y = mean_score), 
               color = "black", fill = "white", shape = 21, size = 2) +
    ylim(low, up) +
    theme(plot.title = element_text(size = 11),
          legend.text = element_text(size = 8),  # 범례 텍스트 크기 조정
          axis.text.x = element_text(size = 8),
          axis.text.y = element_text(size = 9))+
    stat_compare_means(method = "anova", label.y = up) +      
    stat_compare_means(label = "p.signif", method = "t.test", 
                       ref.group = "ctl_avg", method.args = list(alternative = "two.sided"),
                       comparisons = list(c("unc_avg", "ctl_avg"), c("con_avg", "ctl_avg")),
                       hide.ns = TRUE, p.thresholds = c(0.001, 0.01, 0.05), size = 3)}

